{
  "hash": "e03d1b423ffe56126fe7b4e80dcc31b1",
  "result": {
    "markdown": "---\ntitle: \"Analyzing the Economic Exclusive Zone in Perú\"\ndescription: \"Assessing Trends in Fishing Effort Inside and Outside Peru's EEZ Using AIS Data from Global Fishing Watch.\"\nauthor:\n  - name: Javier Patrón\n    url: https//javipatron.github.io\ndate: 12-20-2022\noutput:\n  distill::distill_article:\n    self_contained: false\npreview: img/monrthly_fishing.gif\ncategories: [MEDS, R, Python, Ocean]\n---\n\n\n# Assessing Trends in Fishing Effort Inside and Outside Peru's EEZ Using AIS Data from Global Fishing Watch.\n\n### Authors\n\nJavier Patrón jpatron\\@ucsb.edu\n\nJessica French jfrench\\@bren.ucsb.edu\n\nPol Carbó Mestre pcarbomestre\\@ucsb.edu\n\n``` python\n## Table of Contents\n1. Purpose(#purpose)\n2. Dataset Description(#overview)\n3. Data I/O(#io)\n4. Metadata Display and Basic Visualization(#display)\n5. Use Case Examples(#usecases)\n6. Create Binder Environment(#binder)\n[7. References](#references)\n```\n\n## Notebook Purpose\n\nThe purpose of this notebook is to explore Global Fishing Watch's dataset showing daily fishing effort as inferred fishing hours daily. This notebook will show how to read in the dataset, visualize the data using google earth engine, and give an overview of how the data can be used to explore differences in fishing effort within and outside Peru's EEZ and how fishing effort is impacted by El Niño Southern Oscillation (ENSO) events.\n\n## Dataset Description\n\nThe Global Fishing Watch (GFW) provides an open platform to access Automatic Identification System (AIS) data from commercial fishing activities. The AIS is a tracking system that uses transceivers on ships to broadcast vessel information such as unique identification, position, course, and speed. AIS is integrated into all classes of vessels as a collision avoidance tool. However, the GFW collects and processes raw AIS data related to fishing activities to improve records and assign additional information, such as the distance from shore, depth, etc. Then, with the use of machine learning models, they characterize vessels and fishing activities, which constitute some of the products available in their API.\n\nOne of the most interesting products that the GFW API offers is estimates of fishing effort derived from AIS data. GFW uses machine learning models to classify fishing vessels and predict when they are fishing. First, they identify fishing vessels in the AIS system. Then the vessel is characterized using the best available information and their fleet registry data combined with a characterization model trained on 45,441 marine vessels (both fishing and non-fishing) matched to official fleet registries. Then, GFW estimates the vessel's fishing time and location based on its movement patterns. To do so, a fishing detection model was trained on AIS data from 503 ships and identified fishing activity with \\>90% accuracy. The model predicts a score for every AIS position in their database to distinguish fishing positions from non-fishing positions (i.e., navigation time). When the model identifies fishing activity, the time associated with that AIS position is registered as apparent fishing activity. More details about the model can be found on the following GitHub repository ([link)](https://github.com/GlobalFishingWatch/vessel-scoring/blob/master/notebooks/Model-Descriptions.ipynb).\n\n![](img/img1.png){fig-align=\"center\" width=\"40%\"}\n\n![](img/img2.png){fig-align=\"center\" width=\"40%\"}\n\nOnce the fishing vessels are identified and their AIS positions have been assigned as fishing positions, the apparent fishing effort can be calculated for any area by summarizing the fishing hours for all fishing vessels in that area. The resulting maps of apparent fishing effort are created by rasterizing all AIS positions into a grid and calculating the total fishing activity in each grid cell. For the present project we will access this type processed data.\n\n![](img/img3.png){fig-align=\"center\" width=\"80%\"}\n\nPre-processed AIS data can be accessed from their [R package \"gfwr\"](https://github.com/GlobalFishingWatch/gfwr) or downloaded from their [website](https://globalfishingwatch.org/data-download/) as .cvs files. For this project, we will use some of their existing products related to fishing effort. The data can be accessed from [Google Big Query](https://globalfishingwatch.org/data/our-data-in-bigquery/) in a less processed format and through Google Earth Engine (GEE) for two data subproducts [daily fishing hours](https://developers.google.com/earth-engine/datasets/catalog/GFW_GFF_V1_fishing_hours) and [daily vessel hours](https://developers.google.com/earth-engine/datasets/catalog/GFW_GFF_V1_vessel_hours#image-properties). For accessibility reasons, we will focus on the GEE data related to fishing hours.\n\nEach image in the collection contains daily rasters of fishing effort measured in hours of inferred fishing activity per square kilometer. Data is available for a given flag state and day, over a 5 years period (2012-2017), where each band represent a fishing gear type. The following figure summarizes the image resolution and the available bands.\n\nThe data used belongs to the [first global assessment of commercial fishing activity](https://www.science.org/doi/full/10.1126/science.aao5646), published in Science by GFW (2018).\n\n## Dataset Input/Output\n\nLoad in necessary packages.\n\n``` python\n# Import packages\nimport ee\nimport geemap\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport json\nfrom itertools import chain\nimport os\n```\n\nAuthenticate and initialize google earth engine.\n\n``` python\n# Authenticate google earth engine\n#ee.Authenticate()\n# Initialize google earth engine \nee.Initialize()\nRead in the data from google earth engine and filter metadata to include all countries.\n```\n\n# Read in the data on fishing hours from google earth engine\n\n``` python\ndataset = ee.ImageCollection('GFW/GFF/V1/fishing_hours')\n# Filter by \"WLD\" to get all global fishing vessel hours. This includes all countries in the dataset. \nfishing_effort_ImgCollection = dataset.filterMetadata('country', 'equals', 'WLD')\n# SRTM data to use for background in the gif.\nSRTM=ee.Image(\"USGS/GTOPO30\")\n```\n\nWe define two areas of interest (AOI) for the time series analysis. The first one relative to the EEZ of Peru stored data/eez_peru/geojson/eez_peru.geojson. The second AOI is a square area comprizing the EEZ and the neigboring waters in the west. We chose to focus on the area of Peru's coast that includes two of the largest fishing ports, Paita and Callao.\n\n``` python\n# Read in EEZ geometry of Peru \nwith open('data/eez_peru/geojson/eez_peru.geojson') as f:\n  geojson = json.load(f)\ncoords = geojson[\"features\"][0][\"geometry\"][\"coordinates\"]\n## The resulting List from the geojson file has an extra bracket that we have to remove to be read it as a polygon\naoi_1 = ee.Geometry.Polygon([i for i in chain.from_iterable(coords)])\n```\n\n``` python\n# Defining new AOI including areas beyond the EEZ\ngeojson = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"coordinates\": [\n          [\n            [\n              -89.8703470212856,\n              -2.9010789371311176\n            ],\n            [\n              -89.8703470212856,\n              -19.936548732128458\n            ],\n            [\n              -70.081492068508,\n              -19.936548732128458\n            ],\n            [\n              -70.081492068508,\n              -2.9010789371311176\n            ],\n            [\n              -89.8703470212856,\n              -2.9010789371311176\n            ]\n          ]\n        ],\n        \"type\": \"Polygon\"\n      }\n    }\n  ]\n}\ncoords = geojson[\"features\"][0][\"geometry\"][\"coordinates\"]\naoi_2 = ee.Geometry.Polygon(coords)\n```\n\nDefine visualization parameters.\n\n``` python\n# Define color palette for visualizations\ntrawlersVis = {\n  'palette': ['0C276C', '3B9088', 'EEFF00', 'ffffff']\n}\n\n# Define video parameters\nvideoArgs = {\n    'dimensions': 670,\n    'region': aoi_2,\n    'framesPerSecond': 4,\n    'crs': 'EPSG:4326',\n    'min': 0.0,\n    'max': 3.0,\n    'palette': ['0C276C', '3B9088', 'EEFF00', 'ffffff']\n}\n```\n\n## Metadata Display\n\nWe can look at the metadata and bands in a couple different ways. The code below is a little overwhelming and diffficult to search through.\n\n``` python\n# Extract the first image so we can look at info about the data in general. \nimage_test = dataset.first()\ninfo = image_test.getInfo()\nprint(info)\n```\n\nThis code allows you to see only the band names and numbers in a more readable format.\n\n``` python\ndef get_image_ids(gee_snipet):\n  x = ee.ImageCollection(gee_snipet)\n  first_image = x.first()\n  bands_list = first_image.bandNames()\n  lista = bands_list.getInfo()\n  for i, val in enumerate(lista):\n    print(i,val)\n    \n#Example\nprint(get_image_ids('GFW/GFF/V1/fishing_hours'))\n```\n\nTo read on the metadata we will first create an object image from the collection and index their properties. To built this first image we will create and use simple methods over the original dataset of GEE.\n\n``` python\n# Creating an image with some filters on time and space\nfishing_image = dataset \\\n    .filterBounds(aoi_2) \\\n    .first()\n\n# See image properties with their names and values\nfishing_props = geemap.image_props(fishing_image)\nfishing_props.getInfo()\n\n# Index by country\ncountry = fishing_props.get('country')\nprint('Country:', country.getInfo())\n\n#Represent the image properties with propertyNames()\nproperties = fishing_image.propertyNames()\nprint('Metadata properties:' , properties.getInfo())\n```\n\n## Metadata CSV Description:\n\nThe GFW [website](https://globalfishingwatch.org/data-download/datasets/public-fishing-effort) allows us to access individual datasets of AIS-based fishing effort and vessel presence. These datasets are provided in daily `.csv` file format and include the same data that is available through the GFW's Google Earth Engine (GEE) API. By examining these files, we can gain insight into the GEE API metadata, such as the number of fishing hours per cell and day, the fishing state flag, and the type of gear used. This information can help us understand how the data is structured on the GEE fishing hours dataset.\n\n``` python\n\n#Reading the CSV file with the attributes of the metadata\nraw_fishing_vessels = pd.read_csv('data/2016-01-01.csv')\nraw_fishing_vessels.head()\n```\n\nFrom that file, we can group, count, and sort the data to see which countries and gear types are most highly represented for that day.\n\n``` python\n# Check for even representation of vessels\nprint(raw_fishing_vessels['flag'].value_counts().sort_values(ascending=False).head())\nprint(raw_fishing_vessels['geartype'].value_counts().sort_values(ascending=False).head())\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}